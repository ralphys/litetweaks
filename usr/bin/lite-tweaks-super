#! /bin/bash
#--------------------------------------------------------------------------------------------------------
# Name: Lite Tweaks Super
# Description: A collection of tools to tweak your Linux Lite system.
# Authors: Misko_2083, John Jenkins, Jerry Bezencon, Ralphy
# Website: https://www.linuxliteos.com
#--------------------------------------------------------------------------------------------------------

# Kill off package managers if running
if [ "$(pidof synaptic)" ];then
    killall -9 synaptic
fi

if [ ! -z "$(pgrep gdebi-gtk)" ];then
    killall -9 gdebi-gtk
fi

# Get input from a previous file
FRM="$@"

# Check if the input is correct and populate array C
echo "$FRM" | grep "APTGETCLEAN" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('CLEAN')
fi

echo $FRM | grep "CLEARMEM" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('CLEARMEM')
fi

echo $FRM| grep "FILESIZES" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('FILES')
fi

echo $FRM | grep "FIXAPT" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('FIXAPT')
fi

echo $FRM | grep "FIXBOOTUP" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('FIXBOOTUP')
fi

echo $FRM | grep "HOSTNAME" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('HNAME')
fi

echo $FRM | grep "REMKERNELS" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('KERNELS')
fi

echo $FRM | grep "LOGARCHIVES" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('LARCHIVES')
fi

echo $FRM | grep "EDNUMLOCK" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('NUMLOCK')
fi

echo $FRM | grep "PRELOAD" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('PRELOAD')
fi

echo $FRM | grep "RESIDCONFIG" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('RCONFIG')
fi

echo $FRM | grep "SAVESESSION" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('SAVESESSION')
fi

echo $FRM | grep "AUTOREMOVE" > /dev/null
if [ $? = 0 ];then
ARRAYC+=('REMOVE')
fi

# Call the zenity window icon.
ic="/usr/share/icons/zenity-llcc.png"

CLEAN() {
    echo "#Cleaning the package cache..."
    sleep 1
    apt-get clean
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error..."
        sleep 1
        zenity --error --width="260" --height="80" --title="    Error" \
               --text="\nAn error occurred while cleaning the package cache!"
        return
    fi
    echo "#✔ Package cache cleared" && sleep 1
}
CLEARMEM() {
    echo "#Freeing up system memory, please wait..." && sleep 1
    sh -c 'echo 3 >/proc/sys/vm/drop_caches'
    echo "#✔ System memory freed" && sleep 1
}
FILES() {
    echo "#Getting ready..." && sleep 1 # prevent dialog overlapping
    echo "#Finding Large Files..."

# Main dialog window
INSTALLER_TITLE="Find and list all files in your system based on specified size ranges
\nPlease note:\n
<b>•</b>  This is not a file removal tool. It is provided for informational purposes only.
<b>•</b>  Do not remove files from your system unless you are absolutely convinced that it is safe to do so.\n
Click <b>Quit</b> to exit now or <b>Continue</b> to proceed to the system scan."

    # Application Name Variable
    APPNAME="Find files in a range"

    zenity --question --icon-name=info --width="420" --height="200" --title="$APPNAME" --ok-label="Continue" --cancel-label="Quit" --window-icon="$ic" --text="${INSTALLER_TITLE}"
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi

    while (true); do echo "#Finding Large Files..." # Start scan loop
    if [ "$?" -eq "0" ]; then

    # Set the file size range
    scale_min=$(zenity --title="Minimum file size" --scale --text="Select the minimum file size (in MB)" --min-value=25 --max-value=5000 --value=25 --step=25)

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi

    size_min=$(echo $scale_min | sed "s/.*/+&M/")

    scale_max=$(zenity --title="Maximum file size" --scale --text="Select the maximum file size (in MB)\n• Minimum file size is $size_min\B" --min-value=25 --max-value=5000 --value=51 --step=25)

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi

    while [ $scale_max -le $scale_min ]; do
        zenity --info --width="280" --icon-name=error --title="$APPNAME" --window-icon="$ic" --text="\nMaximum value must not be less or equal to minimum value."
        scale_max=$(zenity --title="$APPNAME" --scale --text="Select the maximum file size.\nMinimum file size is $size_min\B" --min-value=25 --max-value=5000 --value=51 --step=25)

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi
    done

    size_max=$(echo $scale_max | sed "s/.*/-&M/")

    find_large=$(gksudo "stdbuf -oL /bin/bash \-c '(find / -size $size_min -size $size_max -exec du -mh {} + 2>&1 | grep [0-9][MG] | sort -h -r ) 2>&1 | tee /var/log/findfilesrange.log'" |
    stdbuf -oL sed -e '/\*$/ s/^/# /p'|
    zenity --progress --title="Please wait whilst your system is scanned..." --pulsate \
    --width=400 --auto-close )

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        zenity --error \
               --title="Error" --text="$APPNAME has failed."
        return
    fi
    else
        return
    fi
    echo "#Displaying scan results..." && gksu -u ${SUDO_USER:-$USER} leafpad /var/log/findfilesrange.log
    echo "#Waiting for user response..."
    # Scan loop question
    zenity --question --width="260" --title="$APPNAME" --window-icon="$ic" --text="\nWould you like to run another scan?"
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    else
        continue
    fi
    done
}
FIXAPT() {
    # Check Internet access
    echo "#Stage 1: Checking for internet connection..."
    if eval "sudo -u ${SUDO_USER:-$USER} curl -sk google.com/" >> /dev/null 2>&1; then
    : # pass
    else # Prompt ERROR internet connection
        (zenity --info --ok-label="Got it!" --title="Lite Tweaks - No Internet connection detected" \
            --text="\n<b>Your computer does not seem to be connected to the internet</b> \n \nPackage System Repair requires internet access in order to fetch package lists. \nPlease check your Internet connection and try again. The task will now abort." --no-wrap)
            break
    fi
    # Stage 1
    echo "#Stage 1: Repairing the package system."$"\n ✍ This might take some time. Please wait..."
    apt-get clean
    cd /var/lib/apt
    mv lists lists.old
    mkdir -p lists/partial
    apt-get clean
    apt-get update
            if [ "${PIPESTATUS[0]}" -ne "0" ]; then
                    echo "#Error"
                    sleep 1
                    zenity --error --width=320 --height=80 --title="     Lite Tweaks - Error" \
               --text="\nThere was an error while fetching package lists. \n \nCheck your system log for more details."
                    break
            fi
    # Stage 2
    echo "#Stage 2: Repairing the package system."$"\n ✍ This might take some time. Please wait..."

    apt-get install -f
            if [ "${PIPESTATUS[0]}" -ne "0" ]; then
                    echo "#Error"
                    sleep 1
                    zenity --error --width=320 --height=80 --title="     Lite Tweaks - Error" \
                   --text="There was an error while\nInstalling partialy installed packages!"
                    return
            fi
    # Stage 3
    echo "#Stage 3: Repairing the package system."$"\n ✍ This might take some time. Please wait..."

    # Recreate  /etc/apt/sources.list ...
    rm -f /etc/apt/sources.list.save && rm -f /etc/apt/sources.list && touch /etc/apt/sources.list
    echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) main restricted universe multiverse"
    echo $'\n' >> /etc/apt/sources.list
    echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-security main restricted universe multiverse"
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-updates main restricted universe multiverse"
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-proposed main restricted universe multiverse"
    add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc)-backports main restricted universe multiverse"
    echo $'\n' >> /etc/apt/sources.list
    echo "###### Ubuntu Partner Repos" >> /etc/apt/sources.list
    add-apt-repository -y "deb http://archive.canonical.com/ $(lsb_release -sc) partner"
    cp /etc/apt/sources.list /etc/apt/sources.list.save

    #Check the release version to reset /etc/apt/sources.list.d/linuxlite.list
    LLVER=$(awk '{print $3}' /etc/llver)
    RELNUM=$( echo "$LLVER / 1" | bc )  # Get Release number and remove
    REL_VERSION_NAME=(beryl citrine)    # Set Release version name array
    # Update /etc/apt/sources.list.d/linuxlite.list for BERYL
    if [ "$RELNUM" == "2"  ]; then
        # Check for /etc/apt/sources.list.d/linuxlite.list file...
        # If file exists:
        if  [ -f /etc/apt/sources.list.d/linuxlite.list.save ]; then
            rm -f /etc/apt/sources.list.d/linuxlite.list.save && rm -f /etc/apt/sources.list.d/linuxlite.list
            touch /etc/apt/sources.list.d/linuxlite.list
            echo "deb http://repo.linuxliteos.com/linuxlite/ ${REL_VERSION_NAME[0]} main" >> /etc/apt/sources.list.d/linuxlite.list
            cp /etc/apt/sources.list.d/linuxlite.list  /etc/apt/sources.list.d/linuxlite.list.save

            # If file does not exist:
        elif [ ! -f /etc/apt/sources.list.d/linuxlite.list.save ]; then
            rm -f /etc/apt/sources.list.d/linuxlite.list
            touch /etc/apt/sources.list.d/linuxlite.list
            echo "deb http://repo.linuxliteos.com/linuxlite/ ${REL_VERSION_NAME[0]} main" >> /etc/apt/sources.list.d/linuxlite.list
            cp /etc/apt/sources.list.d/linuxlite.list  /etc/apt/sources.list.d/linuxlite.list.save
        fi
        # Update /etc/apt/sources.list.d/linuxlite.list for CITRINE
    elif [ "$RELNUM" == "3"  ]; then
        # Check for /etc/apt/sources.list.d/linuxlite.list file...
        # If file exists:
        if  [ -f /etc/apt/sources.list.d/linuxlite.list.save ]; then
            rm -f /etc/apt/sources.list.d/linuxlite.list && rm -f /etc/apt/sources.list.d/linuxlite.list.save
            touch /etc/apt/sources.list.d/linuxlite.list
            echo "deb http://repo.linuxliteos.com/linuxlite/ ${REL_VERSION_NAME[1]} main" >> /etc/apt/sources.list.d/linuxlite.list
            cp /etc/apt/sources.list.d/linuxlite.list  /etc/apt/sources.list.d/linuxlite.list.save
            echo "$RELVERSION"

        # If file does not exist:
        elif [ ! -f /etc/apt/sources.list.d/linuxlite.list.save ]; then
            rm -f /etc/apt/sources.list.d/linuxlite.list
            touch /etc/apt/sources.list.d/linuxlite.list
            echo "deb http://repo.linuxliteos.com/linuxlite/ ${REL_VERSION_NAME[1]} main" >> /etc/apt/sources.list.d/linuxlite.list
            cp /etc/apt/sources.list.d/linuxlite.list  /etc/apt/sources.list.d/linuxlite.list.save
        fi
    # DON'T UPDATE UNSUPPORTED RELEASE - Sample
    elif [ "$RELNUM" == "4" ]; then
        zenity --warning --width=320 --height=80 --title="     Lite Tweaks - Warning" \
               --text="\n<b>Unsupported Linux Lite release version found</b> \n \n/etc/apt/sources.list.d/linuxlite.list and /etc/apt/sources.list.d/linuxlite.list.save files will not be reset. "
    fi
    # Unset variables used during FIXAPT
    unset REL_VERSION_NAME
    unset RELNUM
    unset LLVER

    apt-get update
    # Final Stage
    echo "#Final Stage: Repairing the package system."$"\n ✔ Completing Repair..."
    dpkg --configure -a && sleep 2
}
FIXBOOTUP() {
echo "#Fixing the bootup. This might take a while..."
# Check LL version
LL_VERSION=$(awk '{print $3}' /etc/llver 2>/dev/null|| echo "Unknown")
case $LL_VERSION in
3.0)
title="Linux Lite 3.0"
black="0x000000"
white="0xffffff"
brown="0xffff00"
blue="0x000000"
;;
3.2)
title="Linux Lite 3.2"
black="0x000000"
white="0xffffff"
brown="0xffff00"
blue="0x000000"
;;
3.4)
title="Linux Lite 3.4"
black="0x000000"
white="0xffffff"
brown="0xffff00"
blue="0x000000"
;;
3.6)
title="Linux Lite 3.6"
black="0x000000"
white="0xffffff"
brown="0xffff00"
blue="0x000000"
;;
3.8)
title="Linux Lite 3.8"
black="0x000000"
white="0xffffff"
brown="0xffff00"
blue="0x000000"
;;
Unknown)
zenity --info --title="Bootup fix" --text="Unknown OS"
return
;;
*)
zenity --info --title="Lite Tweaks" --text="Bootup fix\nRelease not supported!"
return
;;
esac

APPNAME_ERROR=" Bootup Fix - Error"

sed -i "s/^title=.*$/title=$title/;s/^black=.*$/black=$black/;s/white=.*$/white=$white/;s/^brown=.*$/brown=$brown/;s/^blue=.*$/blue=$blue/" /usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error" && sleep 1
        zenity --error --width="260" --height="80" --title="$APPNAME_ERROR" \
               --text="An error occurred while fixing the bootup! \n \nUnable to write to /etc/lsb-release"
        return
    fi

update-initramfs -u
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error" && sleep 1
        zenity --error --width="260" --height="80" --title="$APPNAME_ERROR" \
               --text="An error occurred while fixing the bootup! \n \nStatus: update-initramfs failed"
        return
    fi

echo "Linux Lite $LL_VERSION LTS \n \l" | tee /etc/issue
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error" && sleep 1
        zenity --error --width="260" --height="80" --title="$APPNAME_ERROR" \
               --text="An error occurred while fixing the bootup! \n \nUnable to write to /etc/issue"
        return
    fi

sed -i 's/^DISTRIB_DESCRIPTION=.*$/DISTRIB_DESCRIPTION="Linux Lite '"$LL_VERSION"'"/g' /etc/lsb-release
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error" && sleep 1
        zenity --error --width="260" --height="80" --title="$APPNAME_ERROR" \
               --text="An error occurred while fixing the bootup! \n \nUnable to write to /etc/lsb-release"
        return
    fi
echo "#✔ Bootup fix successfully completed" && sleep 1
}
HNAME() {
    current_hostname=$(cat /etc/hostname)

    echo "#Changing hostname. Please wait..." && sleep 1
    echo "#Changing hostname... ${current_hostname}"

    while (true); do

    newhost=$(zenity --entry --width="280" --window-icon=$ic --ok-label="Change" --title=" Change Hostname" \
                     --text="Your computer's current hostname is:  ' ${current_hostname} '\n\nEnter the desired new hostname (e.g.: MyLitePC-01) \nbelow and click 'Change' to proceed. \n \nNote: The hostname must not be empty, or start with \nhashtags, or contain whitespaces.\n" --entry-text="${current_hostname}")

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi

    # If hostname is only blank spaces or starts with a hashtag, warn and loop
    echo "$newhost" | egrep "^[[:space:]]*$|^#|[[:space:]]" >/dev/null
    if [ $? = 0 ]; then
        zenity --warning --width="340" --height="60" --ok-label="Got it!" \
        --title=" Hostname not changed" --text="\nThe new Hostname must not be empty, or start with hashtags, or contain whitespaces.\n \nHostname cannot be changed"
        continue

    # If old hostname and new hostname are the same, warn and loop
    elif [ $newhost = $current_hostname ]; then
         zenity --info --width="340" --height="60" --ok-label="Got it!" \
                --title=" Hostname not changed" --text="\nThe Hostname did not change... nothing to do here"
        continue

    else
        sed -i "s/$current_hostname/$newhost/g" /etc/hosts
        sed -i "s/$current_hostname/$newhost/g" /etc/hostname

    fi


    while (true); do
    # Reboot dialogue
    echo "#Changing hostname to ' $newhost ' " && sleep 1
    title=" Hostname changed"
    exit_type=`zenity  --width="380" --height="200" --cancel-label="Revert Changes" --text="Hostname has been changed to: <b>$newhost</b>\n\nYou must reboot your computer for changes to take effect." --title="$title" --list --radiolist --column="Select" \
                       --column="Exit Type" --column="Description" \
                       TRUE "Reboot" "Reboot your computer"\
                       FALSE "Shutdown" "Shutdown your computer"\
                       FALSE "Continue" "Continue using your computer" `

    # User must select a target type (Check if they cancelled)
    if [ ! "$exit_type" ]; then
        echo "#Reverting hostname changes to... ${current_hostname} " && sleep 1
        sed -i "s/$newhost/$current_hostname/g" /etc/hosts
        sed -i "s/$newhost/$current_hostname/g" /etc/hostname
        zenity --info --width="260" --height="60" --title=" Changes reverted" --text="\nHostname has been reverted to <b>$current_hostname</b>. \nThis task will now exit."
        return
    fi

    # Action to perform by user
    if [ "$exit_type" = "Reboot" ]
        then
        # Do Reboot here
        shutdown -r now
    elif [ "$exit_type" = "Shutdown" ]
        then
        # Do Shutdown here
        shutdown -h now
    else
    # Do Cancel here
        zenity --info --width="340" --height="60" \
               --title="Hostname changed" --text="\nHostname has been changed to: <b>$newhost</b>\n\nDon't forget to reboot your computer for these changes to take effect."
        return
    fi
    done
done
}
KERNELS() {
    while (true); do
    # Check current Kernel
    CURKERNEL=$(uname -r|sed 's/-*[a-z]//g'|sed 's/-386//g')

    # Define what Kernel packages to look for
    LINUXPKG="linux-(image|headers|ubuntu-modules|restricted-modules)"
    METALINUXPKG="linux-(image|headers|restricted-modules)-(generic|i386|i686|server|common|rt|xen)"

    # Find old Kernels
    OLDKERNELS=$(dpkg -l|awk '{print $2}'|grep -E $LINUXPKG |grep -vE $METALINUXPKG|grep -v $CURKERNEL)

    # Check if there are old Kernels
    echo $OLDKERNELS | grep linux*
    if [ "${PIPESTATUS[1]}" -ne "0" ]; then
        zenity --info --width="200" --height="60" --title=" Results" --text="\nNo additional kernels found."
        return
    fi

    # sed command adds all FALSE entries in the column 'Select'
    zen=(`echo "$OLDKERNELS" | sort | sed -e  's/^/FALSE\n/'`)

# Main dialog window
DIALOG_TEXT="List of previous kernel (currently unused) you may not longer wish to keep in your system
\n<b>•</b>  Be sure to select both, the header and image of each kernel version you wish to remove.
<b>•</b>  After clicking <b>Remove</b>, a list of selected kernels shows for reviewing before removal.\n
<i>** The removal process will not begin until your selection is reviewed and confirmed.**</i>\n"

    APPNAME="Kernel Cleaner"

    # Call the dialog. Don't change the separator here!
    okernel=$(zenity --window-icon="$ic" --list --checklist --separator=" " --width=540 --height=380   --column="Select" --column="Kernel List" \
    --text="${DIALOG_TEXT}" --title="$APPNAME" --ok-label="Remove" --cancel-label="Quit" "${zen[@]}" )

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then # If cancel is clicked then exit
        return
    fi
    # Check if anything is selected
    echo $okernel | grep linux*
    if [ "${PIPESTATUS[1]}" -ne "0" ]; then
        zenity --info --width="260" --height="60" --window-icon="$ic" --title=" $APPNAME" --text="\nNo kernel header and image were selected for removal. Try again."
        continue
    fi
    # Split kernel selection
    selection_array=($okernel)
    KN_NAMES=""
    for ((i=0; i<${#selection_array[@]}; ++i)); do
        KN_NAMES=$KN_NAMES"✔ "${selection_array[$i]}"\n"
    done
    # Confirm kernel selection removal
    zenity --question --window-icon="$ic" --width="280" --height="60" --title=" $APPNAME"  --text="\nYou are about to remove:<b>\n\n$KN_NAMES </b>\nDo you want to proceed?"
    if [ "$?" -eq "0" ]; then
        apt-get purge -y $okernel | zenity --progress --title='Removing Additional Kernels' --text='Removing...' --no-cancel --pulsate --width=400 --auto-close --auto-kill
        zenity --info --width="270" --title="$APPNAME" --window-icon="$ic" --text="\nSelected kernels were successfully removed."
        return

        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
            zenity --error --width="180" --height="60" --title="    Error" --text="\n$APPNAME has failed."
            return
        fi
    fi
done
}
LARCHIVES() {
    echo "#Deleting archived logs..."
    find /var/log \( -name '*.gz' -o -name '*.0' -o -name '*.1' \) -exec rm -rf {} \;
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error..."
        sleep 1
        zenity --error --width="260" --height="80" --title="    Error" \
               --text="\nAn error occurred while deleting archived logs!"
        return
    fi
    echo "#✔ Archived logs cleared" && sleep 1
}
NUMLOCK() {
    echo "#Getting Numlock status..." && sleep 1 
    APPNAME="   Lite Tweaks - Numlock"
    LITEAPPSICONS=/usr/share/liteappsicons/litetweaks
    # The loop
    while (true); do
    echo "#Configuring Numlock..."
    # Get Numlock current status
    grep -q "numlockx on" /etc/lightdm/lightdm.conf && echo $?
        if [ $? = 0 ]; then
            appicon1=$LITEAPPSICONS/appicon1-on.png
        else
            appicon1=$LITEAPPSICONS/appicon1-off.png
        fi
    grep -q "numlockx off" /etc/lightdm/lightdm.conf && echo $?
        if [ $? = 0 ]; then
            appicon2=$LITEAPPSICONS/appicon3-on.png
        else
            appicon2=$LITEAPPSICONS/appicon3-off.png
        fi

    # Enable/Disable NumLock
    EDNL=$(zenity --width="350" --height=180 --cancel-label="Quit" --ok-label="Apply" --window-icon=$ic --title="$APPNAME" \
              --list --imagelist --print-column=2 --text='         <span font="Sans Bold 10">Enable or Disable Numlock at login</span>\n' \
              --column "  " --column "Numlock" --column "Description" \
              $appicon1 "Enable" "Enables Numlock at login" \
              $appicon2 "Disable" "Disables Numlock at login")

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi
    # enable numlock
    if [[ "$EDNL" =~ "Enable" ]]; then
        if grep -q "numlockx on" /etc/lightdm/lightdm.conf; then
            zenity --info --width="300" --height="60" --timeout=3 --height="60" --ok-label="Got it!" \
                --title=" Numlock" --text="\nNumlock at login is already enabled. No changes needed."
        else
            sed -i "s/numlockx off/numlockx on/g" /etc/lightdm/lightdm.conf && echo "#✔ Enabling Numlock at login..." && sleep .5
        fi
    # disable numlock
    elif [[ "$EDNL" =~ "Disable" ]]; then
        if grep -q "numlockx off" /etc/lightdm/lightdm.conf; then
            zenity --info --width="300" --height="60" --timeout=3 --height="60" --ok-label="Got it!" \
                --title=" Numlock" --text="\nNumlock at login is already disabled. No changes needed."
        else
            sed -i "s/numlockx on/numlockx off/g" /etc/lightdm/lightdm.conf && echo "#✔ Disabling Numlock at login..." && sleep .5
        fi
    else
        zenity --info --width="280" --height="60" --timeout=5 --height="60" \
               --title=" Numlock" --text="\nYou did not select an option. Please try again."
    fi
    done
}
PRELOAD() {
    echo "#Getting Apps Preload status. Please wait..." && sleep 1 && echo "#Configuring Preload..."
    APPNAME="   Lite Tweaks - Preload Apps"
    SERVICE="preload"
    # the loop
    while (true); do
    # Is preload installed?
    if [ -z  "$(dpkg -l | grep -E '^ii' | grep preload)" ]; then
        # if not installed, then prompt user for installation
        zenity --question --width="290" --height="80" --title="    $APPNAME" \
               --text="\nPreload is currently not installed in your system.\n Would you like to install Preload now?"
               answer=$?
        # Check Internet access
        if eval "sudo -u ${SUDO_USER:-$USER} curl -sk google.com" >> /dev/null 2>&1; then
            : # pass
            else # Prompt ERROR internet connection
            (zenity --info --width="460" --height="80" --ok-label="Got it!" --title="Lite Tweaks - No Internet connection detected" \
                    --text="\n<b>Your computer doesn't seem to be connected to the Internet</b> \n \nLite Tweaks will install Preload from your local cache if it's available. \
            \nIf the package does not exist in your system cache, Preload installation will fail. \nYou can always check your Internet connection and try again at a later time.")
        fi
                if [ "$answer" -eq "0" ]; then
                    echo "#Installing Preload. Please wait..." && sleep 1
                    apt-get install preload -y # install preload
                    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
                        echo "#Error..." && sleep 1
                        zenity --error --width="260" --height="80" --title="    Error" \
                               --text="\nAn error occurred while installing Preload!"
                        return
                    else
                        echo "#✔ Preload successfully installed..." && sleep 1
                        continue
                    fi
                else # when user refuses installation, exit out Preload Apps Tweak
                    exit 1
                fi
    fi
    # check if preload service is running and assign variables
    if ps ax | grep -v grep | grep $SERVICE > /dev/null; then
        val1=TRUE && val2=FALSE && val3=FALSE && status="Running ✔"
    else val1=FALSE && val2=TRUE && val3=FALSE && status="Stopped ✘"
    fi

    # Preload Status Main window
    echo "#Configuring Preload..."
    PRLOAD=$(zenity --width="360" --height=180 --cancel-label="Quit" --ok-label="Change Status" --hide-header --window-icon=$ic --title="   $APPNAME" \
              --list --radiolist --text "   Preload Status: <b>$status</b>\n\n   Change status:" \
              --column "Select" --column "Option" --column "Description" \
              $val1 "Running" "(Preload is currently running)" \
              $val2 "Stopped" "(Preload is currently stopped )" \
              $val3 "Remove" "(Remove Preload)")

    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        return
    fi

    if [[ $PRLOAD =~ Running ]]; then # Start
            if ps ax | grep -v grep | grep $SERVICE > /dev/null; then
                echo "#Service is already running..." && sleep 1
                continue
            else
                echo "#Starting Preload..." && sleep 1
                service preload start
                echo "#✔ Preload has been started" && sleep 1
                continue
            fi
    elif [[ $PRLOAD =~ Stopped ]]; then # Stop
            if ps ax | grep -v grep | grep $SERVICE > /dev/null; then
                echo "#Stopping Preload..." && sleep 1
                service preload stop
                echo "#✔ Preload has been stopped" && sleep 1
            else
                echo "#Service is not running..." && sleep 1
                continue
            fi
    elif [[ $PRLOAD =~ Remove ]]; then # Remove Preload
        echo "#Removing Preload. Please wait..."
        service preload stop && apt-get remove preload -y
            if [ "${PIPESTATUS[0]}" -ne "0" ]; then
                echo "#Error..." && sleep 1
                zenity --error --width="260" --height="80" --title="    Error" \
                       --text="\nAn error occurred while removing Preload!"
                return
            else
                echo "#✔ Preload successfully removed" && sleep 1
                return
            fi
    fi
    done
}
RCONFIG() {
    echo "#Removing residual configuration files..."
    dpkg --purge `dpkg -l | grep '^rc' | awk '{print $2}'`
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "#Error..."
        sleep 1
        zenity --error --width="260" --height="80" --title="    Error" \
               --text="\nAn error occurred while removing residual configuration files!"
        return
    fi
    echo "#✔ Residual configuration files cleared" && sleep 1
}
REMOVE() {
    echo "#Removing unneeded packages, please wait..."
    apt-get autoclean -y && apt-get autoremove -y
    if [ "${PIPESTATUS[0]}" -ne "0" ]; then
        echo "# Error..."
        sleep 1
        zenity --error --width="260" --height="80" --title="    Error"
               --text="\nAn error occurred while removing unneeded packages!"
        return
    fi
    echo "#✔ Unneeded packages cleared" && sleep 1
}
SAVESESSION() {
    echo "#Manage Save Session..." && sleep 1
    kiosk_dir=/etc/xdg/xfce4/kiosk
    kioskrc=/etc/xdg/xfce4/kiosk/kioskrc
    APPNAME="Manage Save Session"
    LITEAPPSICONS=/usr/share/liteappsicons/litetweaks
    ic="/usr/share/pixmaps/litetweaks.png"

    if [ -d $kiosk_dir ]; then
    # check whether kioskrc and its settings exist
        if [ -f $kioskrc ]; then
            grep -q -F '[xfce4-panel]' $kioskrc || echo '[xfce4-panel]' >> $kioskrc
            grep -q -F 'CustomizePanel' $kioskrc || echo 'CustomizePanel=ALL' >> $kioskrc
            grep -q -F '[xfce4-session]' $kioskrc || echo '[xfce4-session]' >> $kioskrc
            grep -q -F 'CustomizeSplash' $kioskrc || echo 'CustomizeSplash=NONE' >> $kioskrc
            grep -q -F 'CustomizeChooser' $kioskrc || echo 'CustomizeChooser=NONE' >> $kioskrc
            grep -q -F 'CustomizeLogout' $kioskrc || echo 'CustomizeLogout=ALL' >> $kioskrc
            grep -q -F 'CustomizeCompatibility' $kioskrc || echo 'CustomizeCompatibility=%sudo' >> $kioskrc
            grep -q -F 'Shutdown' $kioskrc || echo 'Shutdown=ALL' >> $kioskrc
            grep -q -F 'CustomizeSecurity' $kioskrc || echo 'CustomizeSecurity=NONE' >> $kioskrc
            grep -q -F 'SaveSession' $kioskrc || echo 'SaveSession=ALL' >> $kioskrc
        else # if kioskrc and its settings don't exist, create defaults
            (umask 133;touch $kioskrc && chown root:root $kiosk_dir -R)
            printf "[xfce4-panel]\nCustomizePanel=ALL\n\n[xfce4-session]\nCustomizeSplash=NONE
CustomizeChooser=NONE\nCustomizeLogout=ALL\nCustomizeCompatibility=%%sudo
Shutdown=ALL\nCustomizeSecurity=NONE\nSaveSession=ALL\n" >> $kioskrc
        fi
    else
        mkdir $kiosk_dir
        (umask 133;touch $kioskrc && chown root:root $kiosk_dir -R)
        printf "[xfce4-panel]\nCustomizePanel=ALL\n\n[xfce4-session]\nCustomizeSplash=NONE
CustomizeChooser=NONE\nCustomizeLogout=ALL\nCustomizeCompatibility=%%sudo
Shutdown=ALL\nCustomizeSecurity=NONE\nSaveSession=ALL\n" >> $kioskrc
    fi
# main loop
while (true); do
    echo "#Manage Save Session..."
    grep -q "SaveSession=ALL" $kioskrc && echo $?
    if [ $? = 0 ]; then
    appicon1=$LITEAPPSICONS/appicon1-on.png
    else
        appicon1=$LITEAPPSICONS/appicon1-off.png
    fi
grep -q "SaveSession=NONE" $kioskrc && echo $?
    if [ $? = 0 ]; then
    appicon3=$LITEAPPSICONS/appicon3-on.png
    else
        appicon3=$LITEAPPSICONS/appicon3-off.png
    fi
grep -q "SaveSession=%sudo" $kioskrc && echo $?
    if [ $? = 0 ]; then
            appicon2=$LITEAPPSICONS/appicon2-on.png
        else
            appicon2=$LITEAPPSICONS/appicon2-off.png
    fi
# main dialog
answ=$(zenity --list --imagelist --title="$APPNAME" --window-icon="$ic" --width="480" --height="215" \
                --cancel-label=" Quit" --ok-label=" Apply" --hide-column=2 --print-column=2 \
                --text='                <span font="Sans Bold 10">Enable or Disable Save Session:</span>\n' \
        --column=" " --column="ANSW" --column=" Save Session" --column=" Description" \
        $appicon1 "30" "Enable for all users" "Enables Save Session for all users" \
        $appicon2 "20" "Enable for admins" "Enables Save Session for administrators only" \
        $appicon3 "10" "Disable for all users" "Disables Save Session for all users")
# exit on Quit or X
if [ "$?" -eq "1" ]; then
    exit 0
fi
# prompt when no option is selected
if [[ $answ -eq "0" ]]; then
    zenity  --info --window-icon="$ic" --title=" $APPNAME" --text="\nYou did not select an option. Please try again."
    continue
fi
# disables Save Session for all users
if [[ $answ -eq "10" ]]; then
    sed -i 's/SaveSession=.*/SaveSession=NONE/' $kioskrc
    echo '#  Disabling Save Session for all users...' && sleep 1 && echo "#✔ Disabling Save Session for all users..." && sleep .5
# enable Save Session for admins only
elif [[ $answ -eq "20" ]]; then
    sed -i 's/SaveSession=.*/SaveSession=%sudo/' $kioskrc
    echo '#  Enabling Save Session for admins only...' && sleep 1 && echo "#✔ Enabling Save Session for admins only..." && sleep .5
# enable Save Session for all users
elif [[ $answ -eq "30" ]]; then
    sed -i 's/SaveSession=.*/SaveSession=ALL/' $kioskrc
    echo '#  Enabling Save Session for all users...' && sleep 1 && echo "#✔ Enabling Save Session for all users..." && sleep .5
 else
    exit 0
fi
done
}

## Arrays execution
x=0
for k in "${!ARRAYC[@]}"; do  x=$(( $x + 1 )); done  # Get the total number of selected items in the array

    TOTAL_LINES=$x

    printf '%s \n' "${ARRAYC[@]}"|
    while read  line
        do
            $line     # Execute functions one by one
            if [ $? = 1 ]; then
                zenity --info --title=" Lite Tweaks" --text="Error:\n${line}"
            fi
        let i++
         (( PERCENTAGE = 100 \* ${i} / ${TOTAL_LINES} ))
         echo "$PERCENTAGE"

        if [ "$PERCENTAGE" == "100" ]; then
            echo "#Done"
            sleep 1
        fi

    done| zenity --progress --pulsate --no-cancel  --title="  Lite Tweaks" --auto-kill --auto-close --width=320

unset ARAYC
unset FRM
unset okernel
unset PROCEED
unset APPNAME
unset INSTALLER_TITLE
