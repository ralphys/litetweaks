#! /bin/bash
#--------------------------------------------------------------------------------------------------------
# Name: Lite Tweaks
# Description: A collection of tools to tweak your Linux Lite system.
# Authors: Misko_2083, John Jenkins, Jerry Bezencon, Ralphy
# Website: https://www.linuxliteos.com
#--------------------------------------------------------------------------------------------------------

# Set functions for non-root execution
# The ones that need administrative privileges go to the other file: lite-tweaks-super
CHROME() {
    echo "#Removing Google Chrome browser cache..." && sleep 1
        rm -rf $HOME/.cache/google-chrome/
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Google Chrome browser cache!"
          return
        fi
        echo "#✔ Google Chrome browser cache cleared" && sleep 1
}
CHROMIUM() {
    echo "#Removing Chromium browser cache..." && sleep 1
        rm -rf $HOME/.cache/chromium/
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Chromium browser cache!"
          return
        fi
        echo "#✔ Chromium browser cache cleared" && sleep 1
}
FIREFOX() {
    echo "#Removing Firefox browser cache..." && sleep 1
        rm -rf $HOME/.cache/mozilla/
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Firefox browser cache!"
          return
        fi
        echo "#✔ Firefox browser cache cleared" && sleep 1
}
MIDORI() {
    echo "#Removing Midori browser cache..." && sleep 1
        rm -rf $HOME/.cache/midori/
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Midori browser cache!"
          return
        fi
        echo "#✔ Midori browser cache cleared" && sleep 1
}
PALEMOON() {
    echo "#Removing Pale Moon browser cache..." && sleep 1
        rm -rf $HOME/.cache/moonchild\ productions/pale\ moon/
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Pale Moon browser cache!"
          return
        fi
        echo "#✔ Pale Moon browser cache cleared" && sleep 1
}
VIVALDI() {
    echo "#Removing Vivaldi browser cache..." && sleep 1
        rm -rf $HOME/.cache/vivaldi/ 
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "# Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while removing Vivaldi browser cache!"
          return
        fi
        echo "#✔ Vivaldi browser cache cleared" && sleep 1
}
THUMBNAILS() {
    echo "#Deleting Thumbnail Cache..." && sleep 1
        rm -rf $HOME/.cache/thumbnails/* 
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "#Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while deleting Thumbnail Cache!"
          return
        fi
        echo "#✔ Thumbnail Cache cleared" && sleep 1
}
TRASH() {
    echo "#Emptying the Trash bin..." && sleep 1
        rm -rf $HOME/.local/share/Trash/files/*
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "#Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while emptying the Trash bin!"
          return
        fi
        echo "#✔ Trash bin emptied" && sleep 1
}
WHISKER() {
    echo "#Cleaning Whisker Menu Recent items..." && sleep 1
        sed -i 's/^recent=.*$/recent=/g' ~/.config/xfce4/panel/whiskermenu-*.rc
        if [ "${PIPESTATUS[0]}" -ne "0" ]; then
          echo "#Error"
          sleep 1
          zenity --error --width="260" --height="80" --title="  Error" --text="\nAn error occurred while cleaning Whisker Menu Recently Used items!"
          return
        fi
        echo "#✔ Whisker Menu Recent items cleared" && sleep 1

    echo "#Restarting the panel..."
    dbus-send --print-reply --dest=org.xfce.Panel /org/xfce/Panel org.xfce.Panel.Terminate boolean:true
    sleep 2
}
DBROWSER() {
echo "#Looking for installed browsers..." && sleep 1
mimeapps=~/.config/mimeapps.list 
echo "#Setting up default browser..."
# Create mimeapps.list if it doesn't exist
if [ ! -f $mimeapps ]; then
      touch $mimeapps
  echo "[Added Associations]" >> $mimeapps  && echo "[Default Applications]" >> $mimeapps
  sed -i -e '1a\application/xhtml+xml=firefox.desktop \nx-scheme-handler/http=firefox.desktop \nx-scheme-handler/https=firefox.desktop' -e '/[Default Applications] /a\text/html=firefox.desktop' $mimeapps
else # If file exists make sure mime options are set before proceeding
  grep "application/xhtml+xml" $mimeapps || sed -i '/Added Associations/a application/xhtml+xml=firefox.desktop' $mimeapps
  grep "x-scheme-handler/http" $mimeapps || sed -i '/Added Associations/a x-scheme-handler/http=firefox.desktop' $mimeapps
  grep "x-scheme-handler/https" $mimeapps || sed -i '/Added Associations/a x-scheme-handler/https=firefox.desktop' $mimeapps
  grep "text/html" $mimeapps || sed -i '/Default Applications/a text/html=firefox.desktop' $mimeapps
fi

test_1=(` grep "application/xhtml+xml" $mimeapps`)
test_2=(` grep "text/html" $mimeapps`)
test_3=(` grep "x-scheme-handler/http" $mimeapps`)
test_4=(` grep "x-scheme-handler/https" $mimeapps`)

hash firefox 2>/dev/null

if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=firefox.desktop;" ]; then
            firefox=("TRUE" "Firefox" "  ✔ default" "Firefox is set as the default Web browser" )
    else
        firefox=("FALSE" "Firefox" "not default" "Set firefox as the default Web browser" )
    fi
else 
    firefox=()
fi

hash google-chrome 2>/dev/null
if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=google-chrome.desktop;firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=google-chrome.desktop;firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=google-chrome.desktop;firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=google-chrome.desktop;firefox.desktop;" ]; then
        googlechrome=("TRUE" "Google Chrome" "  ✔ default" "Google Chrome is set as the default Web browser" )
    else
        googlechrome=("FALSE" "Google Chrome" "not default" "Set Google Chrome as the default Web browser" )
    fi
else
    googlechrome=()
fi

hash chromium-browser 2>/dev/null
if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=chromium-browser.desktop;firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=chromium-browser.desktop;firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=chromium-browser.desktop;firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=chromium-browser.desktop;firefox.desktop;" ]; then
        chromium=("TRUE" "Chromium" "  ✔ default" "Chromium is set as the default Web browser" )
    else
        chromium=("FALSE" "Chromium" "not default" "Set Chromium as the default Web browser" )
    fi
else
    chromium=()
fi

hash midori 2>/dev/null
if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=midori.desktop;firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=midori.desktop;firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=midori.desktop;firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=midori.desktop;firefox.desktop;" ]; then
        midori=("TRUE" "Midori" "  ✔ default" "Midori is set as the default Web browser" )
    else
        midori=("FALSE" "Midori" "not default" "Set Midori as the default Web browser" )
    fi
else
    midori=()
fi

hash palemoon 2>/dev/null
if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=palemoon.desktop;firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=palemoon.desktop;firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=palemoon.desktop;firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=palemoon.desktop;firefox.desktop;" ]; then
        palemoon=("TRUE" "Pale Moon" "  ✔ default" "Pale Moon is set as the default Web browser" )
    else
        palemoon=("FALSE" "Pale Moon" "not default" "Set Pale Moon as the default Web browser" )
    fi
else
    palemoon=()
fi

hash vivaldi 2>/dev/null
if [ "${PIPESTATUS[0]}" -eq "0"  ]; then
    if [ "${test_1[0]}" = "application/xhtml+xml=vivaldi-stable.desktop;firefox.desktop;" ] && [ "${test_2[0]}" = "text/html=vivaldi-stable.desktop;firefox.desktop;" ] && [ "${test_3[0]}" = "x-scheme-handler/http=vivaldi-stable.desktop;firefox.desktop;" ] && [ "${test_4[0]}" = "x-scheme-handler/https=vivaldi-stable.desktop;firefox.desktop;" ]; then
        vivaldi=("TRUE" "Vivaldi" "  ✔ default" "Vivaldi is set as the default Web browser" )
    else
        vivaldi=("FALSE" "Vivaldi" "not default" "Set Vivaldi as the default Web browser" )
    fi
else
    vivaldi=()
fi

        selection=$(zenity --window-icon="$ic" --list --radiolist --width=550 --height=200 --column="Select" --column="Name" --column="Status" \
        --column="Description" --text='                 <span font="Sans Bold 10">Choose the Web browser you want to set as the default</span>\n' \
        --title="Default Web Browser" --ok-label="Set" --cancel-label="Cancel" \
        "${firefox[@]}" "${chromium[@]}" "${googlechrome[@]}" "${midori[@]}" "${palemoon[@]}" "${vivaldi[@]}"  )
        
        # "The kill switch"
         if [ "${PIPESTATUS[0]}" -ne "0" ]; then
            return
        fi
    sleep 1
    case "$selection" in
    "Firefox") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=firefox.desktop;!g" $mimeapps `;
        `sed -i "s!^"${test_2[0]}"!text/html=firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=firefox.desktop;!g" $mimeapps `;;
    "Chromium") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=chromium-browser.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_2[0]}"!text/html=chromium-browser.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=chromium-browser.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=chromium-browser.desktop;firefox.desktop;!g" $mimeapps `;;
    "Google Chrome") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=google-chrome.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_2[0]}"!text/html=google-chrome.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=google-chrome.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=google-chrome.desktop;firefox.desktop;!g" $mimeapps `;;
    "Midori") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=midori.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_2[0]}"!text/html=midori.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=midori.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=midori.desktop;firefox.desktop;!g" $mimeapps `;;
    "Pale Moon") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=palemoon.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_2[0]}"!text/html=palemoon.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=palemoon.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=palemoon.desktop;firefox.desktop;!g" $mimeapps `;;
    "Vivaldi") `sed -i "s!^"${test_1[0]}"!application/xhtml+xml=vivaldi-stable.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_2[0]}"!text/html=vivaldi-stable.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_3[0]}"!x-scheme-handler/http=vivaldi-stable.desktop;firefox.desktop;!g" $mimeapps `; \
        `sed -i "s!^"${test_4[0]}"!x-scheme-handler/https=vivaldi-stable.desktop;firefox.desktop;!g" $mimeapps `;;
    esac
echo "#✔ $selection is now the default browser!" && sleep 1
unset mimeapps
}
DU() {
while (true); do
DU_TEXT='<span font="Sans 10"><b>•</b>  Double click a Partition to open in file manager.
<b>•</b>  Click columns header to sort the information.\n</span>'
DU_TITLE="Disk Usage"
TMP_DU=$(mktemp /tmp/diskusage.XXXXX)

df -h -T| tail -n+2 | while read fs type size used rest target; do
    if [[ $rest ]] ; then
        echo "$fs" "$type" "$size"B "$used"B "$rest"B "${target[@]}" |grep /dev/sd |
        awk '{print $1,"\n",$2,"\n",$3,"\n",$4,"\n",$5,"\n",$6}BEGIN{ s = 7; e = 35; }{for (i=s; i<=e; i++) printf("%s%s", $(i), i<e ? OFS : "\n"); }' # Workaround for disk labels that contain whitespaces(number of characters that can be divided by whitespace =e-s)
    fi
done | sed -e 's/[ \t]*$//' $1|  tee $TMP_DU 

SEL=$(cat $TMP_DU | zenity --list --ok-label="Open in File Manager" --cancel-label="Quit" --window-icon="$ic" --width=600 --height=350 --title="  ${DU_TITLE}" --text="${DU_TEXT}" \
                    --column="Device" --column="Filesystem" --column="Size" --column="Used" --column="Free" --column="%Used" --column="Partition" --print-column="7"| cut -d '|' -f2)

    if [ -z "$SEL" ]; then
      rm -f $TMP_DU
      return
    fi

thunar "$(echo $SEL)"
done
}

# Set the dialogue window icon
ic="/usr/share/pixmaps/litetweaks.png"

ARRAYS() {
# Invoke arrays
ARRAYA=()    # Array for automatic cleaning tool
ARRAYB=()    # Array for cleaning tools that require root
 
# Populate arrays - ARRAY A

echo $selection | grep "Chrome" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('CHROME')
fi

echo $selection | grep "Chromium" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('CHROMIUM')
fi

echo $selection | grep "Default Web Browser" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('DBROWSER')
fi

echo $selection | grep "Display Disk Usage" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('DU')
fi

echo $selection | grep "Firefox" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('FIREFOX')
fi

echo $selection | grep "Midori" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('MIDORI')
fi

echo $selection | grep "Pale Moon" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('PALEMOON')
fi

echo $selection | grep "Thumbnail Cache" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('THUMBNAILS')
fi

echo $selection | grep "Trash Bin" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('TRASH')
fi

echo $selection | grep "Vivaldi" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('VIVALDI')
fi

echo $selection | grep "Whisker Menu" > /dev/null
if [ $? = 0 ];then
ARRAYA+=('WHISKER')
fi

# Populate arrays - ARRAY B

echo $selection | grep "Autoremove Packages" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('AUTOREMOVE')
fi

echo $selection | grep "Bootup Fix" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('FIXBOOTUP')
fi

echo $selection | grep "Clear Memory" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('CLEARMEM')
fi

echo $selection | grep "Hostname" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('HOSTNAME')
fi

echo $selection | grep "Kernel Removal" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('REMKERNELS')
fi

echo $selection | grep "Locate Large Files" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('FILESIZES')
fi

echo $selection | grep "Log Archives" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('LOGARCHIVES')
fi

echo $selection | grep "Numlock" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('EDNUMLOCK')
fi

echo $selection | grep "Package Cache" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('APTGETCLEAN')
fi

echo $selection | grep "Package System Repair" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('FIXAPT')
fi

echo $selection | grep "Preload" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('PRELOAD')
fi

echo $selection | grep "Residual Config Files" > /dev/null
if [ $? = 0 ];then
ARRAYB+=('RESIDCONFIG')
fi
}

RUN() {
# Check if ARRAYA is empty. If empty, skip the execution
if [ ${#ARRAYA[@]} -ne 0 ]; then

    x=0
    for k in "${!ARRAYA[@]}"; do  x=$(( $x + 1 )); done  # Get the total number of selected items in array A

    TOTAL_LINES=$x

    printf '%s \n' "${ARRAYA[@]}"|
    while read  line
        do
            $line     # Execute functions one by one
            if [ $? = 1 ]; then
                zenity --error --title="  Lite Tweaks" --text="\nThere was an error while performing cleaning:\n ${line}"
                exit 1
            fi    
        let i++
         (( PERCENTAGE = 100 \* ${i} / ${TOTAL_LINES} ))
         echo "$PERCENTAGE"

        if [ "$PERCENTAGE" == "100" ]; then
            echo "#Done"
            sleep 1
        fi
    
    done| zenity --progress --width=320 --pulsate --no-cancel  --title="  Lite Tweaks" --auto-kill --auto-close
fi

# Check if ARRAYB is empty. If empty, skip the execution
if [ ${#ARRAYB[@]} -ne 0 ]; then
   case $? in
    0) gksu -m '
<b>   Lite Tweaks requires Administrative privileges</b>

Some of the selected tasks require Administrative privileges for execution.

 Please enter your password to continue.'  /usr/bin/lite-tweaks-super "${ARRAYB[@]}"  # Open lite-tweaks-super with superuser privileges and pass the array B
    ;;
    1) return
  esac
fi
}

CHECK() { 
# Execute checks - organized following Main zenity dialog window order
# Check if the google-chrome browser cache exists
if [ -d  "$HOME/.cache/google-chrome/" ]; then
    GCCACHESIZE=$(du -sh $HOME/.cache/google-chrome/ | awk '{print $1}' | sed 's/$/B/')
    chrome=("FALSE" "Chrome Cache" "Clean" "Internet" "Safe" "You can remove $GCCACHESIZE from your Chrome browser cache" )
    else
        chrome=() 
fi

# Check if the chromium browser cache exists
if [  -d  "$HOME/.cache/chromium/" ]; then
    CHRCACHESIZE=$(du -sh $HOME/.cache/chromium/ | awk '{print $1}' | sed 's/$/B/')
    chromium=("FALSE" "Chromium Cache" "Clean" "Internet" "Safe" "You can remove $CHRCACHESIZE from your Chromium browser cache" )
else
         chromium=() # Main zenity dialogue window
fi

# Check if firefox browser cache exists
if [  -d  "$HOME/.cache/mozilla/" ];then
    FFCACHESIZE=$(du -sh "$HOME/.cache/mozilla/"| awk '{print $1}'| sed 's/$/B/')
    firefox=("FALSE"  "Firefox Cache" "Clean" "Internet" "Safe" "You can remove $FFCACHESIZE from your Firefox browser cache" )
else
        firefox=()
fi

# Check if archived /var/log files exist
if [ "$(find /var/log -type f \( -iname \*.gz -o -iname \*.0 -o -iname \*.1 \) 2>/dev/null -maxdepth 100 -size +1k)" ];  then
    LOGARCHIVESIZE=$(find /var/log -type f \( -iname \*.gz -o -iname \*.0 -o -iname \*.1 \) 2>/dev/null -exec du -csh '{}' + | tail -1 | awk '{print $1}' | sed 's/$/B/') 
    logarchive=(FALSE "Log Archives" "Clean" "System" "Safe" "You can remove $LOGARCHIVESIZE worth of archived logs" )
else
    logarchive=(FALSE "Log Archives" "Clean" "System" "Safe" "You can remove 0kB worth of archived logs")
fi

# Check if  midori browser cache exists
if [  -d  "$HOME/.cache/midori/" ]; then
    CHRCACHESIZE=$(du -sh $HOME/.cache/midori/ | awk '{print $1}' | sed 's/$/B/')
    midori=("FALSE" "Midori Cache" "Clean" "Internet" "Safe" "You can remove $CHRCACHESIZE from your Midori browser cache" )
else
         midori=()
fi

# Check if  Pale Moon browser cache exists
if [  -d  "$HOME/.cache/moonchild productions/pale moon/" ]; then
    CHRCACHESIZE=$(du -sh $HOME/.cache/moonchild\ productions/pale\ moon/ | awk '{print $1}' | sed 's/$/B/')
    palemoon=("FALSE" "Pale Moon Cache" "Clean" "Internet" "Safe" "You can remove $CHRCACHESIZE from your Pale Moon browser cache" )
else
         palemoon=()
fi

# Check package cache exists
if [ "$(find /var/cache/apt/archives/ -maxdepth 1 -size +100k)" ];  then
    APTCACHESIZE=$(du -sh /var/cache/apt/archives/ 2>/dev/null | awk '{print $1}' | sed 's/$/B/')
    aptcache=(FALSE "Package Cache" "Clean" "Packages" "Safe" "You can remove $APTCACHESIZE worth of files from your package cache" )
else
    aptcache=(FALSE "Package Cache" "Clean" "Packages" "Safe" "You can remove 0kB worth of files from your package cache")
fi

# Check if preload is installed
if [ -z  "$(dpkg -l | grep -E '^ii' | grep preload)" ]; then
        preload=(FALSE "Preload Apps" "Performance" "System" "Safe" "Fetch commonly used apps into memory for faster startup times")
else
        preload=(FALSE "Preload Apps" "Performance" "System" "Safe" "Preload is currently installed (select to modify)")
fi

# Check if there are any residual configuration files
if [ ! -z  "$(dpkg -l | grep '^rc')"  ]; then
    RESCONFIGQTY=$(dpkg -l | grep '^rc' | awk '{print $2}'| wc -w)
    resconfig=(FALSE "Residual Config Files" "Clean" "Packages" "Safe" "You currently have $RESCONFIGQTY residual configuration files you can remove" )
else
        resconfig=() 
fi

# Check if any thumbnails exist
if [ $(du -sk $HOME/.cache/thumbnails/ | awk '{print $1}')  -gt 100  ]; then
    THUMBCACHESIZE=$(du -sh $HOME/.cache/thumbnails/ | awk '{print $1}' | sed 's/$/B/')
    thumbn=("FALSE" "Thumbnail Cache" "Clean" "Images" "Safe" "You can remove $THUMBCACHESIZE from your thumbnail cache" )
else
        thumbn=( "FALSE" "Thumbnail Cache" "Clean" "Images" "Safe" "You can remove 0kB from your thumbnail cache" ) 
fi

# Check if the Trash is empty
if [  "$(ls -A $HOME/.local/share/Trash/files/)" ]; then
        TRASHCACHESIZE=$(du -sh $HOME/.local/share/Trash/ | awk '{print $1}' | sed 's/$/B/')
    trash=("FALSE" "Trash Bin" "Clean" "Home" "Safe" "You can remove $TRASHCACHESIZE from your Trash bin" )
else
        trash=() 
fi

# Check if  vivaldi-stable browser cache exists
if [  -d  "$HOME/.cache/vivaldi/" ]; then
    CHRCACHESIZE=$(du -sh $HOME/.cache/vivaldi/ | awk '{print $1}' | sed 's/$/B/')
    vivaldi=("FALSE" "Vivaldi Cache" "Clean" "Internet" "Safe" "You can remove $CHRCACHESIZE from your Vivaldi browser cache" )
else
         vivaldi=()
fi

# Check if Whisker Menu has Recently Used items
if [ -z "$(cat $HOME/.config/xfce4/panel/whiskermenu-*.rc | grep "^recent=" | cut -d '=' -f2)" ]; then
    whisker_recent=(FALSE "Whisker Menu" "Clean" "Menu" "Safe" "Whisker Menu has no Recently Used items to clean" )
else
    whisker_test=$(cat $HOME/.config/xfce4/panel/whiskermenu-*.rc | grep "^recent=" | cut -d '=' -f2 | sed 's/,/ /g'| wc -w)
    whisker_recent=(FALSE "Whisker Menu" "Clean" "Menu" "Safe" "You can remove $whisker_test Recently Used items from your Whisker Menu" )
fi
}

# Main loop
while (true); do
CHECK        # first run the checks 

# Main zenity dialog window
selection=$(zenity --list --checklist --width=880 --height=580 --window-icon="$ic" --ok-label="Begin" --cancel-label="Quit" --title="  Lite Tweaks" \
--column="Select" --column="Name" --column="Task" --column="Category" --column="Status" --column="Description" \
--text='  <span font="Sans 9">Select the task you wish to perform, then click the Begin button. Sort by clicking on the columns header.\n\n  There are two <b>Status</b> levels:\n  <span foreground="green">Safe</span> - Safe to perform, no harm can be done.\n  <span foreground="red">Caution</span> - Proceed with caution, involves altering the system files.\n\n  You can select multiple tasks for execution (administrative privileges are required for some tasks).\n</span>' \
FALSE "Autoremove Packages" "Clean" "Packages" "Safe" "Remove packages that are no longer installed" \
FALSE "Bootup Fix" "Fix" "Repair" "Caution" "Restore the boot splash to Linux Lite" \
"${chrome[@]}" \
"${chromium[@]}" \
FALSE "Clear Memory" "Performance" "System" "Safe" "Free up RAM memory on your system" \
FALSE "Default Web Browser" "Preferred" "Internet" "Safe" "Set your default Web browser" \
FALSE "Display Disk Usage" "Information" "System" "Safe" "Display overall disk usage information for all partitions" \
"${firefox[@]}" \
FALSE "Hostname" "Edit" "System" "Caution" "Change the computer hostname (you must reboot afterwards)" \
FALSE "Kernel Removal" "Clean" "System" "Caution" "Remove kernels you no longer wish to boot from" \
FALSE "Locate Large Files" "Information" "System" "Caution" "Find files on your system within a size range" \
"${logarchive[@]}" \
"${midori[@]}" \
FALSE "Numlock" "Edit" "System" "Safe" "Enable/Disable Numlock at Login" \
"${aptcache[@]}" \
FALSE "Package System Repair" "Fix" "Repair" "Caution" "Restore the package management system to default" \
"${palemoon[@]}" \
"${preload[@]}" \
"${resconfig[@]}" \
"${thumbn[@]}" \
"${trash[@]}" \
"${vivaldi[@]}" \
"${whisker_recent[@]}" )

# If Quit is clicked then exit
if [ "${PIPESTATUS[0]}" -ne "0" ]; then 
      exit 0
fi

# Check if anything is selected
echo $selection | grep '[a-zA-Z0-9]'
if [ "${PIPESTATUS[1]}" -ne "0" ]; then
    zenity --info --width="260" --height="80" --title=' Lite Tweaks' --text='\n<b>No tasks were selected</b>.\nNothing for me to do. Try again. '
    return
fi

ARRAYS   #Separate selected items into arrays A and array B
RUN
done

exit 0